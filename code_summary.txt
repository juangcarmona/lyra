==== src/Lyra/Program.cs ====
Ôªøusing System;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Lyra.Services;
using Lyra.Utils;

namespace Lyra
{
    class Program
    {
        static async Task Main(string[] args)
        {
            // Set up Dependency Injection with Logging
            var serviceProvider = new ServiceCollection()
                .AddLogging(configure =>
                {
                    configure.AddConsole();
                    configure.SetMinimumLevel(LogLevel.Information);
                })
                .AddSingleton<DownloaderService>()
                .BuildServiceProvider();

            var logger = serviceProvider.GetRequiredService<ILogger<Program>>();

            PrintBanner(logger);

            try
            {
                FFmpegChecker.EnsureFFmpegIsAvailable(logger);
            }
            catch (Exception)
            {
                logger.LogError("‚ùå FFmpeg is required for this application to run.");
                return;
            }

            var downloader = serviceProvider.GetRequiredService<DownloaderService>();

            if (args.Length == 0)
            {
                PrintUsage(logger);
                return;
            }

            if (args[0] == "--video" && args.Length > 1)
            {
                string videoUrl = args[1];
                await downloader.DownloadVideo(videoUrl);
            }
            else if (args[0] == "--playlist" && args.Length > 1)
            {
                string playlistUrl = args[1];
                await downloader.DownloadPlaylist(playlistUrl);
            }
            else
            {
                logger.LogError("‚ùå Invalid command.");
                PrintUsage(logger);
            }
        }

        static void PrintBanner(ILogger logger)
        {
            logger.LogInformation("===============================================");
            logger.LogInformation("     üéµ LYRA - Lightweight Youtube Ripping Assistant üé∂");
            logger.LogInformation("===============================================");
        }

        static void PrintUsage(ILogger logger)
        {
            logger.LogWarning("Usage:");
            logger.LogWarning("  lyra --video <YouTube URL>      # Download a single video");
            logger.LogWarning("  lyra --playlist <Playlist URL>  # Download all audios from a playlist\n");
        }
    }
}



==== src/Lyra/Services/ConversionService.cs ====
using System;
using System.IO;
using System.Threading.Tasks;
using Xabe.FFmpeg;

namespace Lyra.Services
{
    public class ConversionService
    {
        public async Task<string> ConvertToMp3(string videoPath)
        {
            string mp3Path = Path.ChangeExtension(videoPath, ".mp3");

            try
            {
                Console.WriteLine("üéµ Converting to mp3...");

                var conversion = await FFmpeg.Conversions.FromSnippet.ExtractAudio(videoPath, mp3Path);

                conversion.OnProgress += (sender, args) =>
                {
                    Console.Write($"\rProgreso: {args.Percent}%");
                };

                await conversion.Start();
                Console.WriteLine($"\nüé∂ MP3 saved: {mp3Path}");

                return mp3Path;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error during conversion: {ex.Message}");

                if (File.Exists(mp3Path))
                {
                    File.Delete(mp3Path);
                    Console.WriteLine($"üóëÔ∏è MP3 deleted: {mp3Path}");
                }

                throw;
            }
        }
    }
}



==== src/Lyra/Services/DownloaderService.cs ====
using System.Text.RegularExpressions;
using Microsoft.Extensions.Logging;
using VideoLibrary;

namespace Lyra.Services
{
    public class DownloaderService
    {
        private readonly ILogger<DownloaderService> _logger;
        private readonly ConversionService _conversionService;
        private static readonly HttpClient _httpClient = new HttpClient();
        private readonly string _downloadPath = Path.Combine(Environment.CurrentDirectory, "downloads");

        public DownloaderService(ILogger<DownloaderService> logger)
        {
            _logger = logger;
            Directory.CreateDirectory(_downloadPath);
            _conversionService = new ConversionService();
        }

        public async Task DownloadVideo(string url)
        {
            _logger.LogInformation($"üé¨ Downloading video: {url}");

            try
            {
                var youtube = YouTube.Default;
                var video = await youtube.GetVideoAsync(url);
                string videoPath = Path.Combine(_downloadPath, video.FullName);

                await File.WriteAllBytesAsync(videoPath, await video.GetBytesAsync());

                _logger.LogInformation($"‚úÖ Download complete: {videoPath}");

                // Convert to MP3
                await _conversionService.ConvertToMp3(videoPath);

                // Optional: Delete the original video file after conversion
                File.Delete(videoPath);
                _logger.LogInformation($"üóëÔ∏è Deleted original video file: {videoPath}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"‚ùå Error downloading video: {ex.Message}");
            }
        }

        public async Task DownloadPlaylist(string playlistUrl)
        {
            _logger.LogInformation($"üìú Fetching playlist: {playlistUrl}");

            try
            {
                // Fetch the playlist webpage
                string htmlContent = await _httpClient.GetStringAsync(playlistUrl);

                // Extract video URLs using regex (matches video IDs from playlist page)
                var matches = Regex.Matches(htmlContent, @"watch\?v=(.{11})");
                var videoUrls = new HashSet<string>(); // Use HashSet to avoid duplicates

                foreach (Match match in matches)
                {
                    string videoId = match.Groups[1].Value;
                    string videoUrl = $"https://www.youtube.com/watch?v={videoId}";

                    if (videoUrls.Add(videoUrl)) // Adds only if it's unique
                    {
                        _logger.LogDebug($"üîó Found video: {videoUrl}");
                    }
                }

                if (videoUrls.Count == 0)
                {
                    _logger.LogWarning("‚ùå No videos found in playlist.");
                    return;
                }

                _logger.LogInformation($"üîπ Found {videoUrls.Count} videos in playlist.");

                // Download each video
                foreach (var url in videoUrls)
                {
                    await DownloadVideo(url);
                }

                _logger.LogInformation($"‚úÖ Playlist downloaded successfully.");
            }
            catch (Exception ex)
            {
                _logger.LogError($"‚ö†Ô∏è Error fetching playlist: {ex.Message}");
            }
        }
    }
}



==== src/Lyra/Services/FFmpegChecker.cs ====
using System;
using System.IO;
using System.Runtime.InteropServices;
using Microsoft.Extensions.Logging;
using Xabe.FFmpeg;

namespace Lyra.Utils
{
    public static class FFmpegChecker
    {
        public static void EnsureFFmpegIsAvailable(ILogger logger)
        {
            try
            {
                // Check if FFmpeg path is set
                string ffmpegPath = FFmpeg.ExecutablesPath;

                if (string.IsNullOrEmpty(ffmpegPath) || !File.Exists(Path.Combine(ffmpegPath, GetFFmpegExecutable())))
                {
                    throw new Exception("FFmpeg not found");
                }

                logger.LogInformation("‚úÖ FFmpeg is available at: " + ffmpegPath);
            }
            catch (Exception)
            {
                logger.LogError("‚ùå FFmpeg is not installed or not found in the system PATH.");
                ProvideInstallationInstructions(logger);
                throw;
            }
        }

        private static void ProvideInstallationInstructions(ILogger logger)
        {
            logger.LogWarning("\nüîπ Installation Instructions:");

            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                logger.LogWarning("  üìå Windows: Download FFmpeg from https://ffmpeg.org/download.html");
                logger.LogWarning("  üìå Add the 'bin' folder to your system PATH.");
            }
            else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
            {
                logger.LogWarning("  üçè macOS: Install FFmpeg using Homebrew:");
                logger.LogWarning("    brew install ffmpeg");
            }
            else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            {
                logger.LogWarning("  üêß Linux: Install FFmpeg using your package manager:");
                logger.LogWarning("    sudo apt install ffmpeg  (Debian/Ubuntu)");
                logger.LogWarning("    sudo dnf install ffmpeg  (Fedora)");
                logger.LogWarning("    sudo pacman -S ffmpeg  (Arch)");
            }
            else
            {
                logger.LogWarning("  ‚ö†Ô∏è Unknown OS detected. Please install FFmpeg manually from https://ffmpeg.org/download.html");
            }
        }

        private static string GetFFmpegExecutable()
        {
            return RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? "ffmpeg.exe" : "ffmpeg";
        }
    }
}



==== src/Lyra/Services/PlaylistExtractor.cs ====
// using System;
// using System.Collections.Generic;
// using System.Linq;
// using System.Threading.Tasks;
// using YoutubeExplode;
// using YoutubeExplode.Common;
// using YoutubeExplode.Playlists;
// using VideoLibrary;

// namespace Lyra.Services
// {
//     public class PlaylistExtractor
//     {
//         private readonly YoutubeClient _youtubeClient = new YoutubeClient();

//         public async Task<List<YouTubeVideo>> GetVideosFromPlaylist(string playlistUrl)
//         {
//             var videos = new List<YouTubeVideo>();

//             try
//             {
//                 var playlist = await _youtubeClient.Playlists.GetAsync(playlistUrl);
//                 var videoUrls = playlist.Videos.Where(v => v.Status == VideoStatus.Ok).Select(v => v.Url).ToList();

//                 foreach (var url in videoUrls)
//                 {
//                     var youtube = YouTube.Default; 
//                     var video = await youtube.GetVideoAsync(url);
//                     videos.Add(video);
//                 }
//             }
//             catch (Exception ex)
//             {
//                 Console.WriteLine($"‚ùå Error retrieving playlist: {ex.Message}");
//             }

//             return videos;
//         }
//     }
// }



==== test/Lyra.Tests/DownloaderServiceTests.cs ====
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Lyra.Services;
using Xunit;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using NSubstitute;

namespace Lyra.Tests
{
    public class DownloaderServiceTests : IDisposable
    {
        private readonly DownloaderService _downloader;
        private readonly string _testDownloadPath;
        private readonly ILogger<DownloaderService> _mockLogger;

        public DownloaderServiceTests()
        {
            // Create a unique temp test directory
            _testDownloadPath = Path.Combine(Path.GetTempPath(), "lyra_test_downloads_" + Guid.NewGuid());
            Directory.CreateDirectory(_testDownloadPath);

            _mockLogger = Substitute.For<ILogger<DownloaderService>>();

            // Inject the logger mock
            _downloader = new DownloaderService(_mockLogger);
        }

        [Fact]
        public async Task DownloadSingleVideo_ShouldDownloadAndConvertMp3()
        {
            string videoUrl = "https://www.youtube.com/watch?v=WBqf-vSMA6k"; // Example (verify it's available)

            await _downloader.DownloadVideo(videoUrl);

            // Assert the MP3 file exists
            string expectedMp3 = Directory.GetFiles(_testDownloadPath, "*.mp3").FirstOrDefault();
            expectedMp3.Should().NotBeNull("MP3 file should be created after conversion");

            _mockLogger.Received().LogInformation(Arg.Any<string>());

            Console.WriteLine($"‚úÖ Test Passed: Downloaded {expectedMp3}");
        }

        [Fact]
        public async Task DownloadPlaylist_ShouldDownloadMultipleMp3s()
        {
            string playlistUrl = "https://www.youtube.com/playlist?list=PLquujPA7EWzOoUtojEcgQJCpTkdbVG4LV"; // Example

            await _downloader.DownloadPlaylist(playlistUrl);

            // Assert multiple MP3 files exist
            var mp3Files = Directory.GetFiles(_testDownloadPath, "*.mp3");
            mp3Files.Length.Should().BeGreaterThan(1, "A playlist should contain multiple MP3 files");

            _mockLogger.Received().LogInformation(Arg.Any<string>());

            Console.WriteLine($"‚úÖ Test Passed: Downloaded {mp3Files.Length} MP3 files from playlist");
        }

        public void Dispose()
        {
            // Cleanup test directory after tests
            if (Directory.Exists(_testDownloadPath))
            {
                Directory.Delete(_testDownloadPath, true);
            }
        }
    }
}



==== test/Lyra.Tests/GlobalUsings.cs ====
global using Xunit;


